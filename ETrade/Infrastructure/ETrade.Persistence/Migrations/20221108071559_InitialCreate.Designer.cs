// <auto-generated />
using System;
using ETrade.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ETrade.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221108071559_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ETrade.Domain.Entities.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .HasColumnType("text");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Definition")
                        .HasColumnType("text");

                    b.Property<string>("HttpType")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionType = "Updating",
                            Checked = false,
                            Code = "123",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(4793),
                            Definition = "Edit Password",
                            HttpType = "HttpPost",
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 1,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(4798)
                        },
                        new
                        {
                            Id = 2,
                            ActionType = "Updating",
                            Checked = false,
                            Code = "1234",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(4806),
                            Definition = "Edit Profile",
                            HttpType = "HttpPost",
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 1,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(4807)
                        },
                        new
                        {
                            Id = 3,
                            ActionType = "Writing",
                            Checked = false,
                            Code = "12345",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(4810),
                            Definition = "Create Address",
                            HttpType = "HttpPost",
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 2,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(4811)
                        },
                        new
                        {
                            Id = 4,
                            ActionType = "Reading",
                            Checked = false,
                            Code = "123456",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(4814),
                            Definition = "Get By Id",
                            HttpType = "HttpGet",
                            IsActive = true,
                            IsDeleted = false,
                            MenuId = 2,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(4815)
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Ad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AdDate")
                        .HasColumnType("date");

                    b.Property<string>("AdDetail")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("AdFromWho")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("AdSwapStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AdTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<decimal>("AdVehiclePrice")
                        .HasColumnType("numeric(18,4)");

                    b.Property<string>("AdVehicleStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DamageStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Ads");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdDate = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1571),
                            AdDetail = "ÇOK GÜZEL ARABA",
                            AdFromWho = "ByOwner",
                            AdNo = "123456789",
                            AdSwapStatus = "Yes",
                            AdTitle = "Sahibinden Tertemiz Araba",
                            AdVehiclePrice = 350000.50m,
                            AdVehicleStatus = "FirstHand",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1538),
                            DamageStatus = "Unspecified",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1553)
                        },
                        new
                        {
                            Id = 2,
                            AdDate = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1579),
                            AdDetail = "ÇOK GÜZEL ARABA",
                            AdFromWho = "ByOwner",
                            AdNo = "234567891",
                            AdSwapStatus = "No",
                            AdTitle = "Sahibinden Boyasız Araba",
                            AdVehiclePrice = 150000.7840m,
                            AdVehicleStatus = "SecondHand",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1576),
                            DamageStatus = "HeavilyDamaged",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1577)
                        },
                        new
                        {
                            Id = 3,
                            AdDate = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1584),
                            AdDetail = "ÇOK GÜZEL ARABA",
                            AdFromWho = "FromAuthorizedDealer",
                            AdNo = "345678912",
                            AdSwapStatus = "Yes",
                            AdTitle = "İTHAL ARAÇ",
                            AdVehiclePrice = 1000000.50m,
                            AdVehicleStatus = "ImportedFirstHand",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1581),
                            DamageStatus = "Unspecified",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1582)
                        },
                        new
                        {
                            Id = 4,
                            AdDate = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1589),
                            AdDetail = "ÇOK GÜZEL ARABA",
                            AdFromWho = "FromTheGalery",
                            AdNo = "456789123",
                            AdSwapStatus = "No",
                            AdTitle = "Galeriden Temiz Araç",
                            AdVehiclePrice = 2500000.80m,
                            AdVehicleStatus = "FirstHand",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1586),
                            DamageStatus = "WithoutDamageRegistration",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(1587)
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AddressTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DefaultAddress")
                        .HasColumnType("boolean");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NeighborhoodOrVillage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("character varying(17)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressDetails = "Naci Bekir Mahallesi ,Atılım Cad. Ateş Sok. No:40/7 06500 Yenimahalle/Ankara/Türkiye",
                            AddressTitle = "Evim",
                            AddressType = "Home",
                            City = "Ankara",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 521, DateTimeKind.Local).AddTicks(7375),
                            DefaultAddress = false,
                            District = "Yenimahalle",
                            Email = "bolatcan@email.com",
                            FirstName = "ibo",
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "BOL",
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 521, DateTimeKind.Local).AddTicks(7399),
                            NeighborhoodOrVillage = "Naci Bekir",
                            PhoneNumber = "+90(532)5757966",
                            PostalCode = "06500",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressDetails = "Mustafa Kemal Mahallesi ,Eskişehir Yolu  Kütahya Sok. No:280/7 06500 Çankaya/Ankara/Türkiye",
                            AddressTitle = "İş",
                            AddressType = "Work",
                            City = "Ankara",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 521, DateTimeKind.Local).AddTicks(7439),
                            DefaultAddress = true,
                            District = "Çankaya",
                            Email = "bolatcan@email.com",
                            FirstName = "ibo",
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "BOLAT",
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 521, DateTimeKind.Local).AddTicks(7440),
                            NeighborhoodOrVillage = "Mustafa Kemal",
                            PhoneNumber = "+90(532)5757966",
                            PostalCode = "06100",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(4165),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(4171),
                            Name = "Wolkswagen",
                            SubCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(4180),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(4181),
                            Name = "Honda",
                            SubCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(4183),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(4184),
                            Name = "Fiat",
                            SubCategoryId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(4187),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(4188),
                            Name = "Nissan",
                            SubCategoryId = 4
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "900fabd3-67b0-442d-9567-e244da0cb7fb",
                            CreatedByName = "Owner",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 515, DateTimeKind.Local).AddTicks(7976),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Owner",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 515, DateTimeKind.Local).AddTicks(8003),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GenderType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserIdendityNo")
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b93f085-e0e4-4535-b103-bbef907c88c0",
                            CreatedByName = "Owner",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 516, DateTimeKind.Local).AddTicks(3897),
                            Email = "bolat6606@hotmail.com",
                            EmailConfirmed = true,
                            FirstName = "İbrahim",
                            GenderType = "Unspecified",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Bolat",
                            LockoutEnabled = false,
                            ModifiedByName = "Owner",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 516, DateTimeKind.Local).AddTicks(3906),
                            NormalizedEmail = "BOLAT6606@HOTMAIL.COM",
                            NormalizedUserName = "BOLAT6606",
                            PasswordHash = "AQAAAAEAACcQAAAAEBkVEy1yV246QRvF1kVJLSuRg8f6YyORNOfuJdrVqEt58UJhEHBXmIvyqLJrlS6uMA==",
                            PhoneNumber = "+90(532)575-79-66",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VVPCRDAS3MJWQD5CSW2GWPRADBXEZINA",
                            TwoFactorEnabled = false,
                            UserName = "bolat6606"
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.MainCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(5800),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(5806),
                            Name = "Araçlar"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(5815),
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(5816),
                            Name = "Yedek Parçalar"
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Checked = false,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(3983),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(3988),
                            Name = "Account"
                        },
                        new
                        {
                            Id = 2,
                            Checked = false,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(3998),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(3999),
                            Name = "Address"
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EngineCapacity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EnginePower")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EngineType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EquipmentVariant")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GearType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GuaranteeStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Kilometer")
                        .HasColumnType("integer");

                    b.Property<string>("ModelColour")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ModelYear")
                        .HasMaxLength(4)
                        .HasColumnType("integer")
                        .IsFixedLength();

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PlateNationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TractionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyType = "Hatchback5Door",
                            BrandId = 1,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(138),
                            EngineCapacity = "Cm13011600",
                            EnginePower = "Hp101125",
                            EngineType = "1.6 TDI",
                            EquipmentVariant = "Confortline",
                            FuelType = "Diesel",
                            GearType = "Automatic",
                            GuaranteeStatus = "No",
                            IsActive = false,
                            IsDeleted = false,
                            Kilometer = 102000,
                            ModelColour = "White",
                            ModelYear = 2016,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(144),
                            Name = "Golf",
                            PlateNationality = "TurkeyPlate",
                            TractionType = "FrontDrive"
                        },
                        new
                        {
                            Id = 2,
                            BodyType = "Hatchback5Door",
                            BrandId = 2,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(158),
                            EngineCapacity = "Cm13011600",
                            EnginePower = "Hp101125",
                            EngineType = "1.4 TSI",
                            EquipmentVariant = "Confortline",
                            FuelType = "Diesel",
                            GearType = "Automatic",
                            GuaranteeStatus = "No",
                            IsActive = false,
                            IsDeleted = false,
                            Kilometer = 102000,
                            ModelColour = "White",
                            ModelYear = 2016,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(159),
                            Name = "City",
                            PlateNationality = "TurkeyPlate",
                            TractionType = "FrontDrive"
                        },
                        new
                        {
                            Id = 3,
                            BodyType = "Hatchback5Door",
                            BrandId = 3,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(164),
                            EngineCapacity = "Cm13011600",
                            EnginePower = "Hp101125",
                            EngineType = "1.6 TDI",
                            EquipmentVariant = "Confortline",
                            FuelType = "Diesel",
                            GearType = "Automatic",
                            GuaranteeStatus = "No",
                            IsActive = false,
                            IsDeleted = false,
                            Kilometer = 102000,
                            ModelColour = "White",
                            ModelYear = 2016,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(165),
                            Name = "Egea",
                            PlateNationality = "TurkeyPlate",
                            TractionType = "FrontDrive"
                        },
                        new
                        {
                            Id = 4,
                            BodyType = "Hatchback5Door",
                            BrandId = 4,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(169),
                            EngineCapacity = "Cm13011600",
                            EnginePower = "Hp101125",
                            EngineType = "1.6 Düz",
                            EquipmentVariant = "Confortline",
                            FuelType = "Diesel",
                            GearType = "Automatic",
                            GuaranteeStatus = "No",
                            IsActive = false,
                            IsDeleted = false,
                            Kilometer = 102000,
                            ModelColour = "White",
                            ModelYear = 2016,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(170),
                            Name = "Qashqai",
                            PlateNationality = "TurkeyPlate",
                            TractionType = "FrontDrive"
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MainCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(6940),
                            IsActive = false,
                            IsDeleted = false,
                            MainCategoryId = 1,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(6945),
                            Name = "Otomobil"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(6953),
                            IsActive = false,
                            IsDeleted = false,
                            MainCategoryId = 1,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(6954),
                            Name = "Motorsiklet"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(6957),
                            IsActive = false,
                            IsDeleted = false,
                            MainCategoryId = 1,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(6958),
                            Name = "Minivan & Panelvan"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(6960),
                            IsActive = false,
                            IsDeleted = false,
                            MainCategoryId = 1,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 524, DateTimeKind.Local).AddTicks(6961),
                            Name = "Arazi, SUV & Pickup"
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageAltText")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("Profil")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 521, DateTimeKind.Local).AddTicks(8514),
                            ImageAltText = "Profil",
                            ImagePath = "/admin/images/userimages/1/profil.jpg",
                            ImageTitle = "ProfilResmi",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 521, DateTimeKind.Local).AddTicks(8520),
                            Profil = true,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.VehicleAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("AddressDetails")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AddressTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NeighborhoodOrVillage")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.HasKey("Id");

                    b.ToTable("VehicleAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressDetails = "Naci Bekir Mahallesi ,Atılım Cad. Ateş Sok. No:40/7 06500 Yenimahalle/Ankara/Türkiye",
                            AddressTitle = "Evim",
                            City = "Ankara",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(1541),
                            District = "Yenimahalle",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(1546),
                            NeighborhoodOrVillage = "Naci Bekir",
                            PostalCode = "06500"
                        },
                        new
                        {
                            Id = 2,
                            AddressDetails = "Naci Bekir Mahallesi ,Atılım Cad. Ateş Sok. No:40/7 06500 Yenimahalle/Ankara/Türkiye",
                            AddressTitle = "Evim",
                            City = "Ankara",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(1555),
                            District = "Yenimahalle",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(1556),
                            NeighborhoodOrVillage = "Naci Bekir",
                            PostalCode = "06500"
                        },
                        new
                        {
                            Id = 3,
                            AddressDetails = "Naci Bekir Mahallesi ,Atılım Cad. Ateş Sok. No:40/7 06500 Yenimahalle/Ankara/Türkiye",
                            AddressTitle = "Evim",
                            City = "Ankara",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(1559),
                            District = "Yenimahalle",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(1560),
                            NeighborhoodOrVillage = "Naci Bekir",
                            PostalCode = "06500"
                        },
                        new
                        {
                            Id = 4,
                            AddressDetails = "Naci Bekir Mahallesi ,Atılım Cad. Ateş Sok. No:40/7 06500 Yenimahalle/Ankara/Türkiye",
                            AddressTitle = "Evim",
                            City = "Ankara",
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(1562),
                            District = "Yenimahalle",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(1563),
                            NeighborhoodOrVillage = "Naci Bekir",
                            PostalCode = "06500"
                        });
                });

            modelBuilder.Entity("ETrade.Domain.Entities.VehicleImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageAltText")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedByName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("AdId");

                    b.ToTable("VehicleImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdId = 1,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(2517),
                            ImageAltText = "Profil",
                            ImagePath = "/admin/images/userimages/profil.png",
                            ImageTitle = "ProfilResmi",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(2523)
                        },
                        new
                        {
                            Id = 2,
                            AdId = 2,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(2532),
                            ImageAltText = "Profil",
                            ImagePath = "/admin/images/userimages/profil.png",
                            ImageTitle = "ProfilResmi",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(2533)
                        },
                        new
                        {
                            Id = 3,
                            AdId = 3,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(2536),
                            ImageAltText = "Profil",
                            ImagePath = "/admin/images/userimages/profil.png",
                            ImageTitle = "ProfilResmi",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(2537)
                        },
                        new
                        {
                            Id = 4,
                            AdId = 4,
                            CreatedByName = "Admin",
                            CreatedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(2539),
                            ImageAltText = "Profil",
                            ImagePath = "/admin/images/userimages/profil.png",
                            ImageTitle = "ProfilResmi",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedByName = "Admin",
                            ModifiedTime = new DateTime(2022, 11, 8, 10, 15, 58, 525, DateTimeKind.Local).AddTicks(2540)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Action", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Menu", "Menu")
                        .WithMany("Actions")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Address", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Brand", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.SubCategory", "SubCategory")
                        .WithMany("Brands")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Model", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETrade.Domain.Entities.Ad", "Ad")
                        .WithOne("Model")
                        .HasForeignKey("ETrade.Domain.Entities.Model", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.SubCategory", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.UserImage", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Identity.AppUser", "AppUser")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.VehicleAddress", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Ad", "Ad")
                        .WithOne("VehicleAddress")
                        .HasForeignKey("ETrade.Domain.Entities.VehicleAddress", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.VehicleImage", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Ad", "Ad")
                        .WithMany("VehicleImages")
                        .HasForeignKey("AdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ad");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETrade.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ETrade.Domain.Entities.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Ad", b =>
                {
                    b.Navigation("Model");

                    b.Navigation("VehicleAddress");

                    b.Navigation("VehicleImages");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Identity.AppUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("UserImages");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.MainCategory", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("ETrade.Domain.Entities.SubCategory", b =>
                {
                    b.Navigation("Brands");
                });
#pragma warning restore 612, 618
        }
    }
}
